from flask import Flask, render_template_string, request, send_file, Response
from werkzeug.utils import secure_filename
import os
import qrcode
import socket
import threading
import tempfile
from concurrent.futures import ThreadPoolExecutor
from flask_cors import CORS

# Initialize Flask app
app = Flask(__name__)
CORS(app)
app.config['MAX_CONTENT_LENGTH'] = 2 * 1024 * 1024 * 1024  # 2GB limit
app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0
app.config['TEMPLATES_AUTO_RELOAD'] = True
PORT = 5000

# Setup upload system
UPLOAD_TEMP = tempfile.mkdtemp()
upload_lock = threading.Lock()
executor = ThreadPoolExecutor(4)  # 4 parallel upload threads

# Get folder path
while True:
    folder_to_serve = input('Enter share folder path [Default: Downloads]: ').strip()
    if not folder_to_serve:
        folder_to_serve = os.path.join(os.path.expanduser('~'), 'Downloads')
    if os.path.isdir(folder_to_serve):
        break
    print(f"Invalid path: {folder_to_serve}")

def format_size(size):
    """Convert bytes to human-readable format"""
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size < 1024.0:
            return f"{size:.1f} {unit}"
        size /= 1024.0
    return f"{size:.1f} TB"

@app.route('/')
def index():
    """Main interface with file listing"""
    try:
        files = [f for f in os.listdir(folder_to_serve) 
                if os.path.isfile(os.path.join(folder_to_serve, f))]
    except Exception as e:
        print(f"Error listing files: {e}")
        files = []

    html = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Fast File Share</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        * { box-sizing: border-box; }
        body {
            margin: 0; padding: 0;
            font-family: 'Segoe UI', sans-serif;
            background: #1e1e1e; color: #ccc;
            display: flex; justify-content: center; align-items: center;
            min-height: 100vh;
        }
        .container {
            width: 95%; max-width: 800px;
            background: #2a2a2a; padding: 1.5rem;
            border-radius: 8px; box-shadow: 0 0 20px rgba(0,0,0,0.5);
            margin: 1rem;
        }
        .files-container {
            max-height: 60vh; overflow-y: auto;
            background: #1a1a1a; padding: 1rem;
            margin-bottom: 1rem; border-radius: 6px;
        }
        .file-item {
            display: flex; justify-content: space-between;
            padding: 0.5rem 0; border-bottom: 1px solid #333;
        }
        .file-link {
            color: #4dabf7; text-decoration: none;
            flex-grow: 1; word-break: break-all;
        }
        .file-size { color: #aaa; font-size: 0.8rem; }
        .progress-container {
            width: 100%; height: 6px;
            background: #1a1a1a; border-radius: 3px;
            margin-bottom: 1rem; overflow: hidden;
        }
        #progressBar {
            height: 100%; width: 0%;
            background: linear-gradient(90deg, #51cf66, #2f9e44);
            transition: width 0.3s;
        }
        #uploadForm {
            display: flex; gap: 0.5rem;
            margin-bottom: 0.5rem;
        }
        #fileInput {
            flex-grow: 1; padding: 0.5rem;
            background: #333; color: #eee;
            border: 1px solid #444; border-radius: 4px;
        }
        #uploadBtn {
            background: #2b8a3e; color: white;
            border: none; padding: 0 1rem;
            border-radius: 4px; cursor: pointer;
        }
        #statusText {
            text-align: center; font-size: 0.9rem;
            color: #adb5bd; margin: 0.5rem 0;
        }
        h2 { margin-top: 0; color: #dee2e6; }
        .qr-info {
            text-align: center; color: #868e96;
            margin-top: 1rem; font-size: 0.8rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>âš¡ Fast File Share</h2>
        <div class="files-container">
            {% if files %}
                {% for file in files %}
                <div class="file-item">
                    <a href="/files/{{ file }}" class="file-link">{{ file }}</a>
                    <span class="file-size">{{ get_file_size(file) }}</span>
                </div>
                {% endfor %}
            {% else %}
                <div style="color: #868e96;">No files found</div>
            {% endif %}
        </div>

        <div class="progress-container">
            <div id="progressBar"></div>
        </div>
        <div id="statusText">Select files to upload</div>

        <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" id="fileInput" name="files" multiple required>
            <button type="button" id="uploadBtn" onclick="startUpload()">Upload</button>
        </form>

        <div class="qr-info">
            Scan QR code with your phone to access
        </div>
    </div>

    <script>
        const CHUNK_SIZE = 5 * 1024 * 1024; // 5MB chunks
        
        function formatSize(bytes) {
            if (bytes < 1024) return bytes + ' B';
            if (bytes < 1048576) return (bytes/1024).toFixed(1) + ' KB';
            if (bytes < 1073741824) return (bytes/1048576).toFixed(1) + ' MB';
            return (bytes/1073741824).toFixed(1) + ' GB';
        }

        async function uploadChunk(file, start, end, chunkNum) {
            const blob = file.slice(start, end);
            const formData = new FormData();
            formData.append('chunk', blob);
            formData.append('name', file.name);
            formData.append('total_size', file.size);
            formData.append('chunk_number', chunkNum);
            
            try {
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });
                if (!response.ok) throw new Error('Upload failed');
                return true;
            } catch (error) {
                console.error('Chunk upload error:', error);
                return false;
            }
        }

        async function startUpload() {
            const input = document.getElementById('fileInput');
            const files = input.files;
            const progressBar = document.getElementById('progressBar');
            const statusText = document.getElementById('statusText');

            if (!files.length) {
                statusText.textContent = "Please select files first";
                statusText.style.color = "#ff6b6b";
                return;
            }

            // Calculate total size
            let totalSize = 0;
            for (const file of files) totalSize += file.size;
            statusText.textContent = `Preparing ${files.length} files (${formatSize(totalSize)})...`;
            statusText.style.color = "#adb5bd";

            // Process files sequentially
            for (const file of files) {
                const totalChunks = Math.ceil(file.size / CHUNK_SIZE);
                let uploadedChunks = 0;
                
                statusText.textContent = `Uploading ${file.name} (0/${totalChunks} chunks)...`;
                
                // Upload chunks in parallel (4 at a time)
                const chunkPromises = [];
                for (let i = 0; i < totalChunks; i++) {
                    const start = i * CHUNK_SIZE;
                    const end = Math.min(start + CHUNK_SIZE, file.size);
                    
                    chunkPromises.push(
                        uploadChunk(file, start, end, i).then(success => {
                            if (success) {
                                uploadedChunks++;
                                const progress = Math.round((uploadedChunks / totalChunks) * 100);
                                progressBar.style.width = `${progress}%`;
                                statusText.textContent = 
                                    `Uploading ${file.name} (${uploadedChunks}/${totalChunks} chunks)`;
                            }
                            return success;
                        })
                    );
                    
                    // Limit to 4 parallel uploads
                    if (chunkPromises.length >= 4) {
                        await Promise.all(chunkPromises);
                        chunkPromises.length = 0;
                    }
                }
                
                // Wait for remaining chunks
                if (chunkPromises.length > 0) {
                    await Promise.all(chunkPromises);
                }
            }

            statusText.textContent = "Upload complete! Refreshing...";
            statusText.style.color = "#51cf66";
            setTimeout(() => location.reload(), 1000);
        }
    </script>
</body>
</html>
'''
    return render_template_string(html, files=files, get_file_size=lambda f: format_size(
        os.path.getsize(os.path.join(folder_to_serve, f)) if os.path.exists(
        os.path.join(folder_to_serve, f)) else "N/A")

@app.route('/files/<filename>')
def serve_file(filename):
    """Serve files with efficient streaming"""
    filepath = os.path.join(folder_to_serve, secure_filename(filename))
    if not os.path.isfile(filepath):
        return "File not found", 404
    
    # Use efficient file sending with range support
    return send_file(
        filepath,
        as_attachment=True,
        conditional=True,
        etag=True,
        max_age=0
    )

@app.route('/upload', methods=['POST'])
def upload_file():
    """Handle chunked file uploads"""
    if 'chunk' not in request.files:
        return 'No chunk data', 400
    
    chunk = request.files['chunk']
    filename = secure_filename(request.form['name'])
    chunk_num = int(request.form['chunk_number'])
    
    if not filename:
        return 'Invalid filename', 400
    
    # Save chunk to temp location
    temp_path = os.path.join(UPLOAD_TEMP, f"{filename}.part{chunk_num}")
    chunk.save(temp_path)
    
    # First chunk creates the target file
    if chunk_num == 0:
        open(os.path.join(folder_to_serve, filename), 'wb').close()
    
    # Schedule background assembly
    executor.submit(assemble_chunks, filename)
    return '', 200

def assemble_chunks(filename):
    """Combine chunks into final file (thread-safe)"""
    with upload_lock:
        # Find all chunks for this file
        chunks = sorted(
            [f for f in os.listdir(UPLOAD_TEMP) if f.startswith(f"{filename}.part")],
            key=lambda x: int(x.split('part')[-1])
        )
        
        # Verify we have all chunks
        expected_chunks = len(chunks)
        if expected_chunks == 0:
            return
        
        # Combine chunks
        with open(os.path.join(folder_to_serve, filename), 'ab') as final_file:
            for chunk in chunks:
                chunk_path = os.path.join(UPLOAD_TEMP, chunk)
                with open(chunk_path, 'rb') as chunk_file:
                    final_file.write(chunk_file.read())
                os.unlink(chunk_path)

def generate_qr(url):
    """Generate QR code for terminal display"""
    qr = qrcode.QRCode(version=1, box_size=10, border=2)
    qr.add_data(url)
    qr.make(fit=True)
    return qr.get_matrix()

def get_local_ip():
    """Get local IP address"""
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
            s.connect(('8.8.8.8', 80))
            return s.getsockname()[0]
    except:
        return '127.0.0.1'

if __name__ == '__main__':
    # Optimize network settings
    socket.setdefaulttimeout(60)
    from werkzeug.serving import WSGIRequestHandler
    WSGIRequestHandler.protocol_version = "HTTP/1.1"
    
    # Display access info
    ip = get_local_ip()
    url = f'http://{ip}:{PORT}'
    print(f"\nâš¡ Fast File Share running at: {url}")
    print("ðŸ“² Scan this QR code with your phone:\n")
    
    for row in generate_qr(url):
        print('  ' + ''.join('â–ˆâ–ˆ' if module else '  ' for module in row))
    
    print("\nPress Ctrl+C to stop the server")
    
    # Start optimized server
    app.run(
        host='0.0.0.0',
        port=PORT,
        threaded=True,
        ssl_context='adhoc'  # HTTPS for better performance
    )